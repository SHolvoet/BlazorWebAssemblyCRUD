@inject ISuperHeroService SuperHeroService
@inject IJSRuntime JSRuntime

<EditForm Model="Hero" OnSubmit="HandleSubmit">
    <div class="form-group">
        <label>First Name</label>
        <InputText @bind-Value="Hero.FirstName" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label>Last Name</label>
        <InputText @bind-Value="Hero.LastName" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label> Hero Name</label>
        <InputText @bind-Value="Hero.HeroName" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label>Comic</label><br />
        <InputRadioGroup @bind-Value="comicId" class="form-control">
            @foreach (var comic in SuperHeroService.Comics)
            {
                <InputRadio Value="@comic.Id" /><span style="padding-left: 5px;">@comic.Name</span><br />
            }
        </InputRadioGroup>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    //[Parameter]
    //public SuperHeroDB.Shared.SuperHero HeroToEdit { get; set; }

    [Parameter]
    public SuperHeroDB.Shared.SuperHero Hero { get; set; } = new SuperHeroDB.Shared.SuperHero();
    int comicId = 1;

    protected override async Task OnInitializedAsync()
    {
        await SuperHeroService.GetComics();
        comicId = Hero.Comic.Id;
    }

    async void HandleSubmit()
    {
        Hero.Comic = SuperHeroService.Comics.FirstOrDefault(c => c.Id == comicId);
        if (Hero.Id == 0)
        {
            await SuperHeroService.CreateSuperHero(Hero);
        }
        else
        {
            await SuperHeroService.UpdateSuperHero(Hero, Hero.Id);
        }
        await JSRuntime.InvokeVoidAsync("console.log", Hero);
    }
}
